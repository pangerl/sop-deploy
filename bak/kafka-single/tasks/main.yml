- name: create working_dir directory
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ working_dir }}"
    - "{{ image_dir }}"

- block:
  - name: download image
    copy: src={{ project_dir }}/packages/middle_img/{{ item }} dest={{ image_dir }}/{{ item }} mode=0644
    with_items:
    - "{{ kafka_image }}"
    - "{{ zookeeper_image }}"

  - name: load image
    shell: /usr/bin/docker load -i {{ image_dir }}/{{ item }}
    with_items:
    - "{{ kafka_image }}"
    - "{{ zookeeper_image }}"
    ignore_errors: true
    
  when: "MID_INSTALL_SOURCE == 'offline'"

- name: remove container
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - "{{ zookeeper_name }}"
    - "{{ kafka_name }}"

- name: create zookeeper
  docker_container:
    name: "{{ zookeeper_name }}"
    image: "wurstmeister/{{ zookeeper_image }}"
    pull: "{{ pull }}"
    volumes:
      - "{{ working_dir }}/zookeeper:/data"
    ports:
     - 2181:2181                              #端口映射
    state: started                              #启动
    restart_policy: always

- name: create kafka
  docker_container:
    name: "{{ kafka_name }}"
    image: "wurstmeister/{{ kafka_image }}"
    pull: "{{ pull }}"
    links:
      - "{{ zookeeper_name }}:zookeeper"
    volumes:
      - "{{ working_dir }}/kafka-logs:/kafka/kafka-logs"
    env:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://{{ kafka_ip }}:9092"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_HOST_NAME: "{{ kafka_ip }}"
      KAFKA_LOG_DIRS: "/kafka/kafka-logs"
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_HOURS: "{{ kafka_log_retention_hours | int }}"
      LOG4J_LOGGER_KAFKA_CONTROLLER: "INFO, controllerAppender"
      KAFKA_ADVERTISED_PORT: "{{ kafka_port | int }}"
    ports:
     - "{{ kafka_port }}:9092"                              #端口映射
    state: started                              #启动
    restart_policy: always