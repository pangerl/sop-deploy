---
# - name: Install the latest version of mysql-client
#   yum:
#     name: mysql
#     state: latest

- name: Create new databases with names 'ambari' and 'hive'
  shell: mysql -h{{ MYSQL_HOST }} -P{{ MYSQL_PORT }} -u{{ MYSQL_USER }} -p'{{ MYSQL_PASSWORD }}' -e 'create database if not exists ambari;create database if not exists hive'
  run_once: true

- name: Create database user with name 'ambari' and password 'ambari123' with all database privileges
  shell: mysql -h{{ MYSQL_HOST }} -P{{ MYSQL_PORT }} -u{{ MYSQL_USER }} -p'{{ MYSQL_PASSWORD }}' -e "GRANT ALL PRIVILEGES ON *.* TO 'ambari'@'%' IDENTIFIED BY 'ambari123';flush privileges;"
  ignore_errors: true

- name: Create database user with name 'hive' and password 'hive' with all database privileges
  shell: mysql -h{{ MYSQL_HOST }} -P{{ MYSQL_PORT }} -u{{ MYSQL_USER }} -p'{{ MYSQL_PASSWORD }}' -e "GRANT ALL PRIVILEGES ON *.* TO 'hive'@'%' IDENTIFIED BY 'hive';flush privileges;"
  ignore_errors: true
  
- name: Extract ambari into /var/www/html
  unarchive:
    src: "{{ project_dir }}/packages/hadoop/{{ ambari_name }}"
    dest: /var/www/html
  args:
    creates: /var/www/html/ambari

- name: Extract HDP-GPL into /var/www/html
  unarchive:
    src: "{{ project_dir }}/packages/hadoop/{{ HDP_GPL_name }}"
    dest: /var/www/html
  args:
    creates: /var/www/html/HDP-GPL

- name: Extract HDP-UTILS into /var/www/html
  unarchive:
    src: "{{ project_dir }}/packages/hadoop/{{ HDP_UTILS_name }}"
    dest: /var/www/html
  args:
    creates: /var/www/html/HDP-UTILS

- name: Extract HDP into /var/www/html
  unarchive:
    src: "{{ project_dir }}/packages/hadoop/{{ HDP_name }}"
    dest: /var/www/html
  args:
    creates: /var/www/html/HDP

- name: Create libtirpc directory if it does not exist
  file:
    path: /var/www/html/libtirpc
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy libtirpc-* into /var/www/html/libtirpc
  copy:
    src: "{{ item }}"
    dest: /var/www/html/libtirpc
  with_items:
    - "{{ project_dir }}/packages/hadoop/{{ libtirpc_name }}"
    - "{{ project_dir }}/packages/hadoop/{{ libtirpc_devel_name }}"

# - name: Install the latest version of createrepo
#   yum:
#     name: createrepo
#     state: latest

- name: Change the working directory to /var/www/html/libtirpc before executing the command
  shell: createrepo .
  args:
    chdir: /var/www/html/libtirpc

- name: Template ambari.repo file to /etc/yum.repos.d/
  copy:
    src: ambari.repo
    dest: /etc/yum.repos.d/ambari.repo

- name: Template HDP.repo file to /etc/yum.repos.d/
  copy:
    src: HDP.repo
    dest: /etc/yum.repos.d/HDP.repo

- name: Template libtirpc.repo file to /etc/yum.repos.d/
  copy:
    src: libtirpc.repo
    dest: /etc/yum.repos.d/libtirpc.repo

- name: Update cache
  yum:
    update_cache: yes
  ignore_errors: true

- name: Repolist
  shell: yum repolist
  ignore_errors: true

- name: Install ambari-server
  yum:
    name: ambari-server
    state: present

- name: Create /usr/share/java directory if it does not exist
  file:
    path: /usr/share/java
    state: directory
    mode: '0755'

- name: Copy mysql-connector-java-5.1.49-bin.jar file to /usr/share/java/
  copy:
    src: "{{ project_dir }}/packages/binary_tag/{{ mysql_connector_java_name }}"
    dest: "{{ item }}"
  with_items:
    - "/usr/share/java/mysql-connector-java.jar"
    - "/var/lib/ambari-server/resources/mysql-connector-java.jar"

- name: Replace server.jdbc.driver.path
  lineinfile:
    path: /etc/ambari-server/conf/ambari.properties
    regexp: '^server\.jdbc\.driver\.path='
    line: server.jdbc.driver.path=/usr/share/java/mysql-connector-java.jar

- name: Setup ambari-server --jdbc-db=mysql
  shell: /usr/sbin/ambari-server setup --jdbc-db=mysql --jdbc-driver=/usr/share/java/mysql-connector-java.jar

- name: Source data into ambari
  shell: mysql -h{{ MYSQL_HOST }} -P{{ MYSQL_PORT }} -u{{ MYSQL_USER }} -p'{{ MYSQL_PASSWORD }}' -e 'use ambari;source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql;'
  run_once: true
  ignore_errors: true

- name: down bigdata_disk_clean
  copy: src=bigdata_disk_clean.sh dest=/opt/bigdata_disk_clean.sh mode=0755

- name: crontab job bigdata_disk_clean
  cron:
    name: "bigdata disk clean"
    minute: "30"
    hour: "1"
    job: "sh /opt/bigdata_disk_clean.sh"

# - name: Template ambari_setup.sh.j2 file to /tmp
#   template:
#     src: ambari_setup.sh.j2
#     dest: /tmp/ambari_setup.sh

# - name: ambari-server setup
#   shell: sh /tmp/ambari_setup.sh

# - name: ambari-server setup
#   shell: ambari-server start

# - name: wait for http_port to be running
#   wait_for: 
#     port: 8080  
#     delay: 10
#     timeout: 300

- name: Prints two lines of messages, but only if there is an environment value set
  debug:
    msg:
    - "请自行执行如下命令继续安装ambari-server服务"
    - "ambari-server setup"
    - "ambari-server start"
    - "确保8080端口正常启动，下一步前端配置"
    - "访问地址： http://{{ inventory_hostname }}:8080 ,账号密码： admin/admin"

